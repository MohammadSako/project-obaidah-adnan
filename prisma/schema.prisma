// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// OLD Method:
// model Category {
//   id    Int     @id @default(autoincrement())
//   name  String
//   image String?
//   url   String
//   types Type[] // One-to-many relationship with Type
// }

// model Type {
//   id         Int      @id @default(autoincrement())
//   name       String
//   image      String?
//   categoryId Int
//   url        String
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   items      Item[] // One-to-many relationship with Item
// }

// model Item {
//   id       Int          @id @default(autoincrement())
//   name     String
//   image    String?
//   typeId   Int
//   url      String
//   category String       @unique
//   type     Type         @relation(fields: [typeId], references: [id], onDelete: Cascade)
//   details  ItemDetail[] // One-to-many relationship with ItemDetail
// }

// model ItemDetail {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String   @db.VarChar(255)
//   color         String
//   size          String
//   price         String
//   image         String
//   alt           String
//   gender        String
//   type          String
//   description   String
//   details       String
//   category      String
//   dashboardType String
//   url           String
//   item          Item     @relation(fields: [category], references: [category], onDelete: Cascade)
// }

// model items {
//   id            String   @id @default(uuid()) @db.Uuid
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String   @db.VarChar(255)
//   color         String
//   size          String
//   price         String
//   image         String
//   alt           String
//   gender        String
//   type          String
//   description   String
//   details       String
//   category      String
//   dashboardType String
// }

model Category {
  id          Int           @id @default(autoincrement())
  title       String        @db.Text
  image       String?       @db.Text
  url         String        @db.Text
  SubCategory SubCategory[] // One-to-many relation with SubCategory
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text
  image       String?  @db.Text
  url         String   @db.Text
  category_id Int      @default(autoincrement())
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  items       Item[] // One-to-many relation with Item
}

model Item {
  id              Int          @id @default(autoincrement())
  title           String       @db.Text
  image           String?      @db.Text
  url             String       @db.Text
  itemid          String       @db.Text
  sub_category_id Int          @default(autoincrement())
  sub_category    SubCategory  @relation(fields: [sub_category_id], references: [id], onDelete: Cascade)
  item_detail     ItemDetail[] // One-to-many relation with ItemDetail
}

model ItemDetail {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String   @db.Text
  color         String   @db.Text
  size          String   @db.Text
  price         String   @db.Text
  image         String   @db.Text
  alt           String   @db.Text
  gender        String   @db.Text
  type          String   @db.Text
  description   String   @db.Text
  details       String   @db.Text
  dashboardType String   @db.Text
  url           String   @unique
  imageid       String   @db.Text
  category      Int
  item          Item     @relation(fields: [category], references: [id], onDelete: Cascade)
}

// Faisal //
// model ItemDetail {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   title       String    @db.VarChar(255)
//   // color         String
//   // size          String
//   // price         String
//   image       String
//   alt         String
//   imageId     String
//   // gender        String  => men / women
//   // type          String  => Top/Lower/Shoes
//   description String
//   details     String
//   category    String
//   // dashboardType String => discounted/ bestSeller/ new arrival
//   filters     Filters[]
//   item        Item      @relation(fields: [category], references: [category], onDelete: Cascade)
// }

// model Filters {
//   id           Int           @id @default(autoincrement())
//   itemDetailId Int?
//   createdAt    DateTime      @default(now())
//   name         String
//   filterValues FilterValue[] // One-to-many relationship with FilterValue
//   ItemDetail   ItemDetail   @relation(fields: [itemDetailId], references: [id])
// }

// model FilterValue {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   value      String
//   filterId  Int // Added foreign key for Filter
//   filter    Filters  @relation(fields: [filterId], references: [id], onDelete: Cascade)
// }

// model Orders {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String   @db.VarChar(255)
//   color         String
//   size          String
//   price         String
//   image         String
//   alt           String
//   gender        String
//   type          String
//   description   String
//   note          String
//   category      String
//   dashboardType String
// }

// Query Example: Use Prisma Client in your application:
// const categories = await prisma.category.findMany({
//   include: {
//     types: {
//       include: {
//         items: {
//           include: {
//             details: true
//           }
//         }
//       }
//     }
//   }
// });
// console.log(categories);

// Example:
// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

// to create a database in supabase
// npx prisma migrate dev --name init

// to seed...
// npx prisma db seed

// prisma data sheet map
// https://www.prisma.io/docs/orm/prisma-schema/data-model/models

// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-postgresql

// schema docu
// https://www.prisma.io/docs/orm/reference/prisma-schema-reference

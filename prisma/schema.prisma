// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int           @id @default(autoincrement())
  title       String        @db.Text
  image       String?       @db.Text
  url         String        @db.Text
  SubCategory SubCategory[] // One-to-many relation with SubCategory
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text
  image       String?  @db.Text
  url         String   @db.Text
  category_id Int      @default(autoincrement())
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  items       Item[] // One-to-many relation with Item
}

model Item {
  id              Int          @id @default(autoincrement())
  title           String       @db.Text
  image           String?      @db.Text
  url             String       @db.Text
  itemid          String       @db.Text
  sub_category_id Int          @default(autoincrement())
  sub_category    SubCategory  @relation(fields: [sub_category_id], references: [id], onDelete: Cascade)
  item_detail     ItemDetail[] // One-to-many relation with ItemDetail
}

model ItemDetail {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String   @db.Text
  color         String   @db.Text
  size          String   @db.Text
  price         Int      @db.Integer
  image         String   @db.Text
  alt           String   @db.Text
  gender        String   @db.Text
  type          String   @db.Text
  description   String   @db.Text
  details       String   @db.Text
  dashboardType String   @db.Text
  imageid       String   @db.Text
  category      Int
  item          Item     @relation(fields: [category], references: [id], onDelete: Cascade)
}

model CarouselImages {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String   @db.Text
  description String   @db.Text
  image       String   @db.Text
  alt         String   @db.Text
  imageid     String   @db.Text
}

model BrandsImages {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String   @db.Text
  image       String   @db.Text
  alt         String   @db.Text
  imageid     String   @db.Text
  description String   @db.Text
}

model Advertisements {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String   @db.Text
  image       String   @db.Text
  alt         String   @db.Text
  imageid     String   @db.Text
  description String   @db.Text
}

model CustomersOrders {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  firstname   String          @db.Text
  lastname    String          @db.Text
  phonenumber String          @db.Text
  firstline   String          @db.Text
  secondline  String          @db.Text
  email       String          @db.Text
  city        String          @db.Text
  additional  String          @db.Text
  totalall    Int             @db.Integer
  delivered   Boolean         @default(false)
  items       CustomersItem[]
}

model CustomersItem {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  title             String           @db.Text
  color             String           @db.Text
  size              String           @db.Text
  price             Int              @db.Integer
  image             String           @db.Text
  alt               String           @db.Text
  gender            String           @db.Text
  type              String           @db.Text
  description       String           @db.Text
  details           String           @db.Text
  dashboardType     String           @db.Text
  imageid           String           @db.Text
  category          Int
  quantity          Int
  totalPrice        Int
  customersOrdersId Int?
  customersOrders   CustomersOrders? @relation(fields: [customersOrdersId], references: [id], onDelete: Cascade)
}

// Faisal //
// model ItemDetail {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   title       String    @db.VarChar(255)
//   // color         String
//   // size          String
//   // price         String
//   image       String
//   alt         String
//   imageId     String
//   // gender        String  => men / women
//   // type          String  => Top/Lower/Shoes
//   description String
//   details     String
//   category    String
//   // dashboardType String => discounted/ bestSeller/ new arrival
//   filters     Filters[]
//   item        Item      @relation(fields: [category], references: [category], onDelete: Cascade)
// }

// model Filters {
//   id           Int           @id @default(autoincrement())
//   itemDetailId Int?
//   createdAt    DateTime      @default(now())
//   name         String
//   filterValues FilterValue[] // One-to-many relationship with FilterValue
//   ItemDetail   ItemDetail   @relation(fields: [itemDetailId], references: [id])
// }

// model FilterValue {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   value      String
//   filterId  Int // Added foreign key for Filter
//   filter    Filters  @relation(fields: [filterId], references: [id], onDelete: Cascade)
// }

// model Orders {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String   @db.VarChar(255)
//   color         String
//   size          String
//   price         String
//   image         String
//   alt           String
//   gender        String
//   type          String
//   description   String
//   note          String
//   category      String
//   dashboardType String
// }

//to add data without losing and data (chatgpt)
// npx prisma generate
// npx prisma migrate dev --name add_product_table => you new table name here
// npx prisma migrate deploy

//ex: npx prisma migrate dev --name customersItem

// to create a database in supabase
// npx prisma migrate dev --name init

// to seed...
// npx prisma db seed

//Node.js
// to clear node cache, to update new data.
// npm cache clean --force

// prisma data sheet map
// https://www.prisma.io/docs/orm/prisma-schema/data-model/models

// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-postgresql

// schema docu
// https://www.prisma.io/docs/orm/reference/prisma-schema-reference
